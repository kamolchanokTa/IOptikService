package optik.models.order;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.GenericGenerator;

import optik.models.orderdetail.OrderDetail;
import optik.models.user.User;

/**
 * An entity Order composed by three fields (id, email, name). The Entity
 * annotation indicates that this class is a JPA entity. The Table annotation
 * specifies the name for the table in the db.
 *
 * @author Kamolchanok Tangsri
 */
@Entity
@Table(name = "cart")

public class Order {

	// An autogenerated id (unique for each user in the db)
	@Id
	@GeneratedValue(generator = "uuid2")
	@GenericGenerator(name = "uuid2", strategy = "uuid2")
	@Column(columnDefinition = "BINARY(16)")
	private UUID id;

	// The customer's email
	private String email;

	// The customer's first name
	private String firstname;

	// The customer's last name
	private String lastname;

	// The user's Date of birth
	@Column(name = "orderdate", columnDefinition = "DATETIME")
	@Temporal(TemporalType.TIMESTAMP)
	private Date orderdate;

	// The customer's Address

	private String address;

	// The customer's city

	private String city;

	// The customer's country

	private String country;

	// The customer's zipcode

	private String zipcode;

	@NotNull
	private double totalprice;

	public Order() {

	}

	public Order(String email, String firstName, String lastName, Date orderdate, String address, String city,
			String country, String zipcode, double totalprice, String deliverymethod) {
		this.orderdate = orderdate;
		this.email = email;
		this.firstname = firstName;
		this.lastname = lastName;
		this.address = address;
		this.city = city;
		this.country = country;
		this.zipcode = zipcode;
		this.totalprice = totalprice;
		this.deliverymethod = deliverymethod;
	}
	
	private String deliverymethod;

	// Getter and setter methods
	
	public String getDeliveryMethod() {
		return  this.deliverymethod;
	}
	

	public UUID getId() {
		return id;
	}

	public void setId(UUID value) {
		this.id = value;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String value) {
		this.email = value;
	}

	public String getName() {
		return firstname.concat(" ").concat(lastname);
	}
	
	public String getFirstName() {
		return firstname;
	}
	
	public String getLastName() {
		return lastname;
	}

	public Date getOrderDate() {
		return orderdate;
	}

	public void setAddress(String address, String city, String country, String zipcode) {
		this.address = address;
		this.city = city;
		this.country = country;
		this.zipcode = zipcode;
	}

	public String getAddress() {
		return this.address;
	}

	public String getCity() {
		return this.city;
	}

	public String getCountry() {
		return this.country;
	}

	public String getZipcode() {
		return this.zipcode;
	}
	
	public double getTotalPrice() {
		return this.totalprice;
	}

	public void setOrder(User user) {
		// TODO Auto-generated method stub

	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	private User user;

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (!(o instanceof Order))
			return false;
		return id != null && id.equals(((Order) o).id);
	}

	@Override
	public int hashCode() {
		return 31;
	}

	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
	private Set<OrderDetail> orderdetails = new HashSet<>();

	public void addOrderDetail(OrderDetail orderdetail) {
		this.orderdetails.add(orderdetail);
		orderdetail.setOrder(this);
	}

	public void removeOrder(OrderDetail orderdetail) {
		orderdetails.remove(orderdetail);
		orderdetail.setOrder(null);
	}

}
